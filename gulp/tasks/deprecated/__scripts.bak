'use strict';

var browserify  = require('browserify'),
    gulp        = require('gulp'),
    gutil       = require('gulp-util'),
    source      = require('vinyl-source-stream'),
    buffer      = require('vinyl-buffer'),
    uglify      = require('gulp-uglify'),
    reactify    = require('reactify');
//var sourcemaps = require('gulp-sourcemaps');

var basePath    = require('../config.js');

var getBundleName = function () {

    var version = require('../../package.json').version,
        name    = require('../../package.json').name;
    
    return version + '.' + name + '.' + 'min';
};

// gulp.task('scripts', function() {

//     var bundler = browserify({

//         entries: [basePath.src + 'scripts/photography/app.js'],
//         debug: true
//     });

//     var bundle = function() {

//         return bundler
//             .transform(reactify)
//             .bundle()
//             .pipe(source(getBundleName() + '.js'))
//             .pipe(buffer())
//             //.pipe(sourcemaps.init({loadMaps: true}))
//             // Add transformation tasks to the pipeline here.
//             .pipe(uglify())
//             //.pipe(sourcemaps.write('./'))
//             .pipe(gulp.dest(basePath.dest + 'js/'));
//     };

//     return bundle();
// });

console.log(gutil.env);

//var essayName = gut//

gulp.task('scripts', function() {

    var bundler = browserify({

        entries: [basePath.src + 'scripts/essays/' + gutil.env.essays + '/app.js'],
        debug: true
    });

    var bundle = function() {

        return bundler
            .transform(reactify)
            .bundle()
            .pipe(source(gutil.env.essays + '.js'))
            .pipe(buffer())
            //.pipe(sourcemaps.init({loadMaps: true}))
            // Add transformation tasks to the pipeline here.
            .pipe(uglify())
            //.pipe(sourcemaps.write('./'))
            .pipe(gulp.dest(basePath.dest + 'js/essays'));
    };

    return bundle();
});
